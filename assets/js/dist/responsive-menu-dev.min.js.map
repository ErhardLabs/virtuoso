{"version":3,"sources":["responsive-menu-dev.min.js"],"names":["document","$","undefined","addClass","genesisSample","mainMenuButtonClass","subMenuButtonClass","_addClassID","$this","this","nav","next","id","attr","_combineMenus","css","length","prependTo","hide","show","appendTo","removeClass","_doResize","buttons","superfish","_getDisplayValue","delay","animation","opacity","height","dropShadows","_superfishToggle","startLink","endLink","each","link","replace","_changeSkipLink","_maybeClose","_mainmenuToggle","_toggleAria","toggleClass","slideToggle","_submenuToggle","others","closest","siblings","find","slideUp","$id","element","getElementById","window","getComputedStyle","getPropertyValue","attribute","index","value","init","toggleButtons","menu","class","aria-expanded","aria-pressed","role","append","params","mainMenu","submenu","text","subMenu","before","on","triggerHandler","ready","resize","genesisSampleL10n","jQuery"],"mappings":"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","file":"responsive-menu-dev.min.js","sourcesContent":["'use strict';\n\n/**\n * Accessibility-ready responsive menu.\n */\n\n(function (document, $, undefined) {\n\n  $('body').addClass('js');\n\n  'use strict';\n\n  var genesisSample = {},\n      mainMenuButtonClass = 'menu-toggle',\n      subMenuButtonClass = 'sub-menu-toggle';\n\n  genesisSample.init = function () {\n    var toggleButtons = {\n      menu: $('<button />', {\n        'class': mainMenuButtonClass,\n        'aria-expanded': false,\n        'aria-pressed': false,\n        'role': 'button'\n      }).append(genesisSample.params.mainMenu),\n      submenu: $('<button />', {\n        'class': subMenuButtonClass,\n        'aria-expanded': false,\n        'aria-pressed': false,\n        'role': 'button'\n      }).append($('<span />', {\n        'class': 'screen-reader-text',\n        text: genesisSample.params.subMenu\n      }))\n    };\n    if ($('.nav-primary').length > 0) {\n      $('.nav-primary').before(toggleButtons.menu); // add the main nav buttons\n    } else {\n      $('.nav-header').before(toggleButtons.menu);\n    }\n    $('nav .sub-menu').before(toggleButtons.submenu); // add the submenu nav buttons\n    $('.' + mainMenuButtonClass).each(_addClassID);\n    $('.' + mainMenuButtonClass).addClass('dashicons-before dashicons-menu');\n    $('.' + subMenuButtonClass).addClass('dashicons-before dashicons-arrow-down');\n    $(window).on('resize.genesisSample', _doResize).triggerHandler('resize.genesisSample');\n    $('.' + mainMenuButtonClass).on('click.genesisSample-mainbutton', _mainmenuToggle);\n    $('.' + subMenuButtonClass).on('click.genesisSample-subbutton', _submenuToggle);\n  };\n\n  // add nav class and ID to related button\n  function _addClassID() {\n    var $this = $(this),\n        nav = $this.next('nav'),\n        id = 'class';\n    if ($(nav).attr('id')) {\n      id = 'id';\n    }\n    $this.attr('id', 'mobile-' + $(nav).attr(id));\n  }\n\n  // check CSS rule to determine width\n  function _combineMenus() {\n    if ($('.js nav').css('position') == 'relative' && $('.nav-primary').length > 0) {\n      // depends on .js nav having position: relative; in style.css\n      $('.nav-header .menu > li').addClass('moved-item'); // tag moved items so we can move them back\n      $('.nav-header .menu > li').prependTo('.nav-primary ul.genesis-nav-menu');\n      $('.nav-header').hide();\n    } else if ($('.js nav').css('position') !== 'relative' && $('.nav-primary').length > 0) {\n      $('.nav-header').show();\n      $('.nav-primary ul.genesis-nav-menu > li.moved-item').appendTo('.nav-header .menu');\n      $('.nav-header .menu > li').removeClass('moved-item');\n    }\n  }\n\n  // Change Skiplinks and Superfish\n  function _doResize() {\n    var buttons = $('button[id^=\"mobile-\"]').attr('id');\n    if (typeof buttons === 'undefined') {\n      return;\n    }\n    _superfishToggle(buttons);\n    _changeSkipLink(buttons);\n    _maybeClose(buttons);\n  }\n\n  /**\n   * action to happen when the main menu button is clicked\n   */\n  function _mainmenuToggle() {\n    var $this = $(this);\n    _toggleAria($this, 'aria-pressed');\n    _toggleAria($this, 'aria-expanded');\n    $this.toggleClass('activated');\n    $this.next('nav, .sub-menu').slideToggle('fast');\n  }\n\n  /**\n   * action for submenu toggles\n   */\n  function _submenuToggle() {\n\n    var $this = $(this),\n        others = $this.closest('.menu-item').siblings();\n    _toggleAria($this, 'aria-pressed');\n    _toggleAria($this, 'aria-expanded');\n    $this.toggleClass('activated');\n    $this.next('.sub-menu').slideToggle('fast');\n\n    others.find('.' + subMenuButtonClass).removeClass('activated').attr('aria-pressed', 'false');\n    others.find('.sub-menu').slideUp('fast');\n  }\n\n  /**\n   * activate/deactivate superfish\n   */\n  function _superfishToggle(buttons) {\n    if (typeof $('.js-superfish').superfish !== 'function') {\n      return;\n    }\n    if ('none' === _getDisplayValue(buttons)) {\n      $('.js-superfish').superfish({\n        'delay': 100,\n        'animation': { 'opacity': 'show', 'height': 'show' },\n        'dropShadows': false\n      });\n    } else {\n      $('.js-superfish').superfish('destroy');\n    }\n  }\n\n  /**\n   * modify skip links to match mobile buttons\n   */\n  function _changeSkipLink(buttons) {\n    var startLink = 'genesis-nav',\n        endLink = 'mobile-genesis-nav';\n    if ('none' === _getDisplayValue(buttons)) {\n      startLink = 'mobile-genesis-nav';\n      endLink = 'genesis-nav';\n    }\n    $('.genesis-skip-link a[href^=\"#' + startLink + '\"]').each(function () {\n      var link = $(this).attr('href');\n      link = link.replace(startLink, endLink);\n      $(this).attr('href', link);\n    });\n  }\n\n  function _maybeClose(buttons) {\n    if ('none' !== _getDisplayValue(buttons)) {\n      return;\n    }\n    $('.menu-toggle, .sub-menu-toggle').removeClass('activated').attr('aria-expanded', false).attr('aria-pressed', false);\n    $('nav, .sub-menu').attr('style', '');\n  }\n\n  /**\n   * generic function to get the display value of an element\n   * @param  {id} $id ID to check\n   * @return {string}     CSS value of display property\n   */\n  function _getDisplayValue($id) {\n    var element = document.getElementById($id),\n        style = window.getComputedStyle(element);\n    return style.getPropertyValue('display');\n  }\n\n  /**\n   * Toggle aria attributes\n   * @param  {button} $this     passed through\n   * @param  {aria-xx} attribute aria attribute to toggle\n   * @return {bool}           from _ariaReturn\n   */\n  function _toggleAria($this, attribute) {\n    $this.attr(attribute, function (index, value) {\n      return 'false' === value;\n    });\n  }\n\n  $(document).ready(function () {\n\n    // run test on initial page load\n    _combineMenus();\n\n    // run test on resize of the window\n    $(window).resize(_combineMenus);\n\n    genesisSample.params = typeof genesisSampleL10n === 'undefined' ? '' : genesisSampleL10n;\n\n    if (typeof genesisSample.params !== 'undefined') {\n      genesisSample.init();\n    }\n  });\n})(document, jQuery);"]}